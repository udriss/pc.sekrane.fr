import { getAllClasses, getAllCourses, getStatistics } from './data-prisma-utils';

async function testAllAPIs() {
  console.log('üß™ Test complet des APIs modifi√©es...\n');

  try {
    console.log('üìä 1. Test des statistiques...');
    const stats = await getStatistics();
    console.log(`   ‚úÖ Classes: ${stats.classesCount}`);
    console.log(`   ‚úÖ Cours: ${stats.coursesCount}`);
    console.log(`   ‚úÖ Activit√©s: ${stats.activitiesCount}\n`);

    console.log('üè´ 2. Test r√©cup√©ration des classes...');
    const classes = await getAllClasses();
    console.log(`   ‚úÖ Nombre de classes r√©cup√©r√©es: ${classes.length}`);
    
    let totalCourses = 0;
    let totalActivities = 0;
    
    classes.forEach(classe => {
      console.log(`   üìö Classe "${classe.name}": ${classe.courses.length} cours`);
      totalCourses += classe.courses.length;
      
      classe.courses.forEach(course => {
        totalActivities += course.activities.length;
      });
    });
    
    console.log(`   ‚úÖ Total cours: ${totalCourses}`);
    console.log(`   ‚úÖ Total activit√©s: ${totalActivities}\n`);

    console.log('üìñ 3. Test r√©cup√©ration des cours...');
    const courses = await getAllCourses();
    console.log(`   ‚úÖ Nombre de cours r√©cup√©r√©s: ${courses.length}`);
    
    const coursesWithActivities = courses.filter(c => c.activities.length > 0);
    console.log(`   ‚úÖ Cours avec activit√©s: ${coursesWithActivities.length}`);
    
    // Afficher quelques exemples
    console.log('   üîç Exemples de cours:');
    courses.slice(0, 3).forEach(course => {
      console.log(`      - "${course.title}" (${course.activities.length} activit√©s)`);
    });

    console.log('\nüéØ 4. V√©rification de la coh√©rence des donn√©es...');
    
    // V√©rifier que chaque cours a bien une classe associ√©e
    let orphanCourses = 0;
    const classIds = classes.map(c => c.id);
    
    courses.forEach(course => {
      if (!classIds.includes(course.theClasseId)) {
        orphanCourses++;
        console.log(`   ‚ö†Ô∏è  Cours orphelin: "${course.title}" (classe ID: ${course.theClasseId})`);
      }
    });
    
    if (orphanCourses === 0) {
      console.log('   ‚úÖ Tous les cours sont correctement associ√©s √† leurs classes');
    }

    // V√©rifier l'int√©grit√© des activit√©s
    let orphanActivities = 0;
    const courseIds = courses.map(c => c.id);
    
    const allActivities = courses.flatMap(course => 
      course.activities.map(activity => ({...activity, courseId: course.id}))
    );
    
    allActivities.forEach(activity => {
      if (!courseIds.includes(activity.courseId)) {
        orphanActivities++;
      }
    });
    
    if (orphanActivities === 0) {
      console.log('   ‚úÖ Toutes les activit√©s sont correctement associ√©es √† leurs cours');
    }

    console.log('\nüéâ Tests termin√©s avec succ√®s !');
    console.log('\nüìã R√©sum√©:');
    console.log(`   - Classes: ${classes.length}`);
    console.log(`   - Cours: ${courses.length}`);
    console.log(`   - Activit√©s: ${allActivities.length}`);
    console.log(`   - Cours orphelins: ${orphanCourses}`);
    console.log(`   - Activit√©s orphelines: ${orphanActivities}`);

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
    process.exit(1);
  }
}

// Ex√©cution du test si appel√© directement
if (require.main === module) {
  testAllAPIs();
}

export default testAllAPIs;
