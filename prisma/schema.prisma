// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Classe {
  id                     String   @id
  name                   String
  toggleVisibilityClasse Boolean? @default(false)
  hasProgression         Boolean  @default(false) // Nouveau champ
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  courses      Course[]
  progressions Progression[] // Nouvelle relation

  @@map("classes")
}

model Course {
  id                     String   @id
  title                  String
  description            String   @db.Text
  classe                 String
  theClasseId            String
  toggleVisibilityCourse Boolean? @default(false)
  themeChoice            Int?     @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  classeRelation Classe     @relation(fields: [theClasseId], references: [id], onDelete: Cascade)
  activities     Activity[]

  @@map("courses")
}

model Activity {
  id        String   @id
  name      String
  title     String
  fileUrl   String
  courseId  String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progressions Progression[]

  isFileDrop      Boolean  @default(false)
  dropzoneConfig  Json?
  submissions     FileDropSubmission[]

  @@map("activities")
}

model FileDropSubmission {
  id           String   @id @default(uuid())
  activityId   String
  originalName String
  storedName   String
  fileSize     Int
  mimeType     String
  uploaderIp   String?
  createdAt    DateTime @default(now())

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("file_drop_submissions")
}

model Progression {
  id          String   @id @default(uuid())
  classeId    String
  date        DateTime
  title       String
  content     String   @db.Text
  icon        String?
  iconColor   String?
  contentType String
  resourceUrl String?  @db.VarChar(1024)
  imageSize   Int?     @default(60) // Taille de l'image en pourcentage
  activityId  String? // Activité préexistante liée (facultatif)
  order       Int      @default(0) // Nouveau champ
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  classe   Classe    @relation(fields: [classeId], references: [id], onDelete: Cascade)
  activity Activity? @relation(fields: [activityId], references: [id], onDelete: SetNull)

  @@index([classeId, date])
  @@map("progressions")
}

model ConnectionLog {
  id        String   @id @default(uuid())
  ip        String
  timestamp DateTime @default(now())
  endpoint  String
  method    String
  userAgent String?
  language  String?
  screen    String?
  timezone  String?

  @@map("connection_logs")
}
